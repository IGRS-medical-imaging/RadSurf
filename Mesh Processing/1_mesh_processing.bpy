import bpy
import os
import time
from mathutils import Vector

# Directory with your input STL files (can contain subdirectories)
input_dir = r"D:\SIT\Abalation\totalSeg_meshes"
# Directory to save the processed STL files
output_dir = r"D:\SIT\Abalation\totalSeg_meshes\processed"

# Function to delete all objects in the scene
def clear_scene():
    bpy.ops.object.select_all(action='SELECT')
    bpy.ops.object.delete(use_global=False)  # Delete all objects

# Function to center the mesh, move it to world center, and scale it to fit a unit cube
def center_and_scale_object(obj):
    # Set origin to center of mass (surface)
    bpy.ops.object.origin_set(type='ORIGIN_CENTER_OF_MASS', center='MEDIAN')
    
    # Snap the cursor to the world origin
    for area in bpy.context.screen.areas:
        if area.type == 'VIEW_3D':  # Check if it's the 3D View area
            with bpy.context.temp_override(area=area):
                bpy.ops.view3d.snap_cursor_to_center()
                obj.select_set(True)  # Ensure the object is selected
                bpy.ops.view3d.snap_selected_to_cursor(use_offset=False)
            break  # Use the first valid 3D View area
    
    # Calculate the bounding box dimensions
    bbox = [obj.matrix_world @ Vector(corner) for corner in obj.bound_box]
    min_corner = [min(axis) for axis in zip(*bbox)]
    max_corner = [max(axis) for axis in zip(*bbox)]
    dimensions = [max_c - min_c for max_c, min_c in zip(max_corner, min_corner)]
    max_dimension = max(dimensions)
    print("max dimension:", max_dimension)
    if max_dimension > 0:
        scale_factor = 1.0 / max_dimension  # Scale uniformly to fit a unit cube
        print("Scale factor:", scale_factor)
        obj.scale = (scale_factor, scale_factor, scale_factor)  # Set scale
        bpy.ops.object.transform_apply(scale=True)  # Apply scale

# Function to decimate the mesh to approximately 10,000 vertices
def decimate_mesh(obj, target_vertices=10000):
    current_vertices = len(obj.data.vertices)
    ratio = target_vertices / current_vertices  # Calculate decimation ratio
    
    # Apply Decimate modifier
    modifier = obj.modifiers.new(name="Decimate", type='DECIMATE')
    modifier.ratio = ratio
    bpy.ops.object.modifier_apply(modifier="Decimate")
    
    # Remove duplicate vertices
    bpy.ops.object.mode_set(mode='EDIT')
    bpy.ops.mesh.select_all(action='SELECT')
    bpy.ops.mesh.remove_doubles(threshold=0.0001)
    bpy.ops.object.mode_set(mode='OBJECT')
    
    print(f"Vertices reduced to: {len(obj.data.vertices)}")

# Recursively find all .stl files in input_dir and its subdirectories
def find_stl_files(directory):
    stl_files = []
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith('.stl'):
                stl_files.append(os.path.join(root, file))
    return stl_files

# Start timing
start_time = time.time()

# Get list of all STL files
stl_files = find_stl_files(input_dir)

# Main Batch Processing Loop
for filepath in stl_files:
    # Clear the scene before each import
    clear_scene()
    
    # Import STL file
    bpy.ops.wm.stl_import(filepath=filepath)
    
    # Get the imported object (usually the active object after import)
    obj = bpy.context.view_layer.objects.active
    
    if obj:
        print(f"Processing object: {obj.name}")
        
        # Perform the operations
        center_and_scale_object(obj)  # Center and scale the object
        decimate_mesh(obj, target_vertices=10000)  # Decimate to 10,000 vertices
        
        # Determine output path
        relative_path = os.path.relpath(filepath, input_dir)  # Preserve subdirectory structure
        output_path = os.path.join(output_dir, relative_path)
        os.makedirs(os.path.dirname(output_path), exist_ok=True)  # Create necessary subdirectories
        
        # Export the modified object to the output directory
        bpy.ops.wm.stl_export(filepath=output_path)
        print(f"Saved processed file to: {output_path}")
    else:
        print(f"Failed to process file: {filepath}")

# End timing
end_time = time.time()
elapsed_time = end_time - start_time
print(f"Batch processing complete! Time taken: {elapsed_time:.2f} seconds.")
